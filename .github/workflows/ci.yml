name: TypeScript SDK CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: "18"
  CACHE_NUMBER: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

    - name: Run TypeScript compiler check
      run: npm run type-check

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
      continue-on-error: true

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  # Multi-platform testing matrix
  test:
    name: Test Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ["16", "18", "20"]
        include:
          # Add experimental Node.js 21 on Ubuntu only
          - os: ubuntu-latest
            node-version: "21"
            experimental: true
        exclude:
          # Reduce matrix for resource efficiency
          - os: macos-latest
            node-version: "16"
          - os: windows-latest
            node-version: "16"

    continue-on-error: ${{ matrix.experimental || false }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Run unit tests
      run: npm run test:unit -- --coverage --reporter=junit --outputFile=junit.xml

    - name: Run integration tests
      run: npm run test:integration

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          junit.xml
          coverage/
          test-results.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-typescript-sdk

  # Browser compatibility testing
  browser-test:
    name: Browser Compatibility
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for browser
      run: npm run build:browser

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run browser tests
      run: npm run test:browser

    - name: Upload browser test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: browser-test-results
        path: |
          test-results/
          playwright-report/

  # React components testing
  react-test:
    name: React Components
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run React component tests
      run: npm run test:react

    - name: Build Storybook
      run: npm run build:storybook

    - name: Run visual regression tests
      run: npm run test:visual

    - name: Upload Storybook build
      uses: actions/upload-artifact@v4
      with:
        name: storybook-build
        path: storybook-static/

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Run performance benchmarks
      run: npm run benchmark

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'benchmarkjs'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: false

  # Bundle size analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Analyze bundle size
      run: npm run analyze:bundle

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: |
          bundle-analysis.json
          webpack-bundle-analyzer-report.html

    - name: Comment bundle size
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('bundle-analysis.json')) {
            const analysis = JSON.parse(fs.readFileSync('bundle-analysis.json', 'utf8'));
            const comment = `## Bundle Size Analysis
            
            **Main Bundle**: ${analysis.main.size} (${analysis.main.gzipped} gzipped)
            **Dependencies**: ${analysis.dependencies.count} packages
            **Tree Shaking**: ${analysis.treeShaking.effectiveness}%
            
            ${analysis.size_change > 0 ? '🔴' : '🟢'} Size change: ${analysis.size_change > 0 ? '+' : ''}${analysis.size_change} bytes`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate API documentation
      run: npm run docs:api

    - name: Build documentation site
      run: npm run docs:build

    - name: Check documentation links
      run: npm run docs:check-links

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/build/

  # Package building and validation
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Pack package
      run: npm pack

    - name: Test package installation
      run: |
        # Test local installation
        mkdir test-install && cd test-install
        npm init -y
        npm install ../amp-typescript-sdk-*.tgz
        
        # Test import
        echo "import { AMPClient } from 'amp-typescript-sdk';" > test.mjs
        node test.mjs

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: "*.tgz"

  # NPM publishing
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [quality, test, browser-test, build, docs]
    environment:
      name: npm
      url: https://www.npmjs.com/package/amp-typescript-sdk
    permissions:
      id-token: write  # OIDC for NPM trusted publishing

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'npm',
            description: 'Published to NPM'
          });

  # Publish to NPM beta (for develop branch)
  publish-beta:
    name: Publish Beta to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [quality, test, browser-test, build]
    environment:
      name: npm-beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Update version for beta
      run: |
        # Add beta suffix to version
        npm version prerelease --preid=beta --no-git-tag-version

    - name: Build package
      run: npm run build

    - name: Publish beta to NPM
      run: npm publish --tag beta --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Deployment to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [docs]
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Notify on completion
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, test, browser-test, react-test, benchmark, docs, build]

    steps:
    - name: Report success
      if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
      run: |
        echo "✅ All checks passed! TypeScript SDK is ready for release."

    - name: Report failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ Some checks failed. Please review the results."
        exit 1