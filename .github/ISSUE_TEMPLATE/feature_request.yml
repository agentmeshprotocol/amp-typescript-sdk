name: Feature Request
description: Suggest a new feature or enhancement for the AMP TypeScript/JavaScript SDK
title: "[FEATURE] "
labels: ["enhancement", "typescript", "needs-triage"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        Thank you for suggesting a new feature for the AMP TypeScript/JavaScript SDK! Please fill out the form below to help us understand your request.
        
        Before submitting:
        - Check our [TypeScript SDK roadmap](https://github.com/orgs/agentmeshprotocol/projects) for planned features
        - Search existing issues to avoid duplicates
        - Review our [TypeScript SDK documentation](https://docs.agentmeshprotocol.io/typescript-sdk) for existing functionality

  - type: textarea
    id: user-story
    attributes:
      label: User Story
      description: Describe the feature as a user story
      placeholder: "As a TypeScript/JavaScript developer using AMP, I want [goal] so that [benefit]"
      value: "As a TypeScript/JavaScript developer using AMP, I want [goal] so that [benefit]"
    validations:
      required: true

  - type: textarea
    id: problem
    attributes:
      label: Problem Statement
      description: What problem does this feature solve for TypeScript/JavaScript developers?
      placeholder: |
        - Current limitation in TypeScript SDK
        - Pain points in JavaScript development workflow
        - Browser/Node.js compatibility issues
        - Type safety concerns
    validations:
      required: true

  - type: textarea
    id: solution
    attributes:
      label: Proposed Solution
      description: Describe your proposed solution for the TypeScript SDK
      placeholder: |
        - Specific TypeScript API design
        - How it integrates with existing SDK
        - Browser and Node.js considerations
        - Type safety improvements
    validations:
      required: true

  - type: dropdown
    id: feature-category
    attributes:
      label: Feature Category
      description: Which area of the TypeScript SDK does this feature relate to?
      options:
        - Core Client API
        - Agent Implementation
        - Transport Layer
        - Message Handling
        - Type Definitions
        - Browser Compatibility
        - Node.js Compatibility
        - WebSocket Support
        - HTTP/REST Support
        - Error Handling
        - Event System
        - Testing Utilities
        - Build/Bundle Support
        - Framework Integration
        - Developer Experience
        - Performance Optimization
        - Other
    validations:
      required: true

  - type: dropdown
    id: target-runtime
    attributes:
      label: Target Runtime
      description: Which JavaScript runtime should this feature support?
      options:
        - All runtimes (Browser + Node.js + Deno + Bun)
        - Browser only
        - Node.js only
        - Deno only
        - Bun only
        - Browser + Node.js
        - Server runtimes (Node.js + Deno + Bun)
        - Specific runtime (explain below)
    validations:
      required: true

  - type: textarea
    id: api-design
    attributes:
      label: Proposed API Design
      description: Show how the TypeScript API would look
      placeholder: |
        ```typescript
        // Example of proposed API
        import { AMPClient, NewFeature } from '@agentmeshprotocol/typescript-sdk';
        
        interface NewFeatureOptions {
          param1: string;
          param2?: number;
        }
        
        const client = new AMPClient({...});
        const feature = new NewFeature(client, options);
        
        // Usage
        const result = await feature.performAction({
          data: "example"
        });
        ```
      render: typescript
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Priority
      description: How important is this feature for TypeScript/JavaScript developers?
      options:
        - Low (nice to have)
        - Medium (would improve experience)
        - High (significantly improves functionality)
        - Critical (blocks important TypeScript/JavaScript use cases)
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Acceptance Criteria
      description: Define specific criteria for when this feature is complete
      placeholder: |
        - [ ] TypeScript types are properly defined
        - [ ] Works in both browser and Node.js
        - [ ] ESM and CommonJS compatible
        - [ ] Documentation includes TypeScript examples
        - [ ] Unit tests cover new functionality
        - [ ] Integration tests with popular frameworks
      value: |
        - [ ] 
        - [ ] 
        - [ ] 
    validations:
      required: true

  - type: textarea
    id: use-cases
    attributes:
      label: TypeScript/JavaScript-Specific Use Cases
      description: Describe specific scenarios where this feature would be used
      placeholder: |
        1. React application: [scenario description]
        2. Node.js server: [scenario description]
        3. Next.js application: [scenario description]
        4. Browser extension: [scenario description]

  - type: dropdown
    id: type-safety
    attributes:
      label: Type Safety Requirements
      description: How important is TypeScript type safety for this feature?
      options:
        - Fully type-safe (strict TypeScript types)
        - Mostly type-safe (some any types acceptable)
        - JavaScript-first (types as enhancement)
        - No specific requirements
    validations:
      required: true

  - type: textarea
    id: type-definitions
    attributes:
      label: Type Definitions
      description: Describe the TypeScript types needed
      placeholder: |
        ```typescript
        // Type definitions for new feature
        interface NewFeatureConfig {
          property1: string;
          property2?: boolean;
        }
        
        interface NewFeatureResult<T = unknown> {
          data: T;
          metadata: Record<string, unknown>;
        }
        
        class NewFeature {
          constructor(config: NewFeatureConfig);
          performAction<T>(input: unknown): Promise<NewFeatureResult<T>>;
        }
        ```
      render: typescript

  - type: dropdown
    id: browser-compatibility
    attributes:
      label: Browser Compatibility
      description: What browser support is needed?
      options:
        - Modern browsers only (ES2020+)
        - ES2018+ support
        - ES2015+ support
        - IE11 support required
        - Not applicable (Node.js only)
    validations:
      required: true

  - type: dropdown
    id: module-support
    attributes:
      label: Module System Support
      description: Which module systems should be supported?
      options:
        - ESM only
        - CommonJS only
        - Both ESM and CommonJS
        - UMD for browser compatibility
        - All module systems
    validations:
      required: true

  - type: dropdown
    id: breaking-change
    attributes:
      label: Breaking Change
      description: Would this feature require breaking changes to the TypeScript SDK?
      options:
        - "No - Backward compatible"
        - "Maybe - Needs analysis"
        - "Yes - Breaking change required"
        - "Unknown"
    validations:
      required: true

  - type: textarea
    id: migration-impact
    attributes:
      label: Migration Impact
      description: How would this affect existing TypeScript SDK users?
      placeholder: |
        **Existing Code**: [impact on current users]
        **Type Definitions**: [changes to types]
        **Build Process**: [impact on bundling/compilation]
        **Dependencies**: [new dependencies needed]

  - type: textarea
    id: framework-integration
    attributes:
      label: Framework Integration
      description: How would this work with popular JavaScript frameworks?
      placeholder: |
        - React: [integration considerations]
        - Vue: [integration considerations]
        - Angular: [integration considerations]
        - Next.js: [integration considerations]
        - Express: [integration considerations]
        - Svelte: [integration considerations]

  - type: textarea
    id: bundling-considerations
    attributes:
      label: Bundling and Build Considerations
      description: How would this affect bundling and build processes?
      placeholder: |
        - Webpack compatibility
        - Vite compatibility
        - Tree-shaking support
        - Bundle size impact
        - Build time impact
        - TypeScript compilation

  - type: textarea
    id: testing-strategy
    attributes:
      label: Testing Strategy
      description: How should this feature be tested in TypeScript/JavaScript?
      placeholder: |
        - Unit tests with Jest/Vitest
        - Type checking tests
        - Browser testing (Playwright/Cypress)
        - Node.js integration tests
        - Framework integration tests
        - Bundle size tests

  - type: textarea
    id: documentation-needs
    attributes:
      label: Documentation Requirements
      description: What documentation would be needed?
      placeholder: |
        - TypeScript API reference
        - JavaScript usage examples
        - Framework integration guides
        - Browser compatibility notes
        - Migration guide (if breaking)

  - type: checkboxes
    id: contribution
    attributes:
      label: Contribution
      options:
        - label: I would be willing to implement this feature
        - label: I would be willing to help with TypeScript type definitions
        - label: I would be willing to help with testing
        - label: I would be willing to help with documentation
        - label: I can provide expertise on browser compatibility
        - label: I can provide expertise on framework integration

  - type: textarea
    id: additional-context
    attributes:
      label: Additional Context
      description: Any other relevant information
      placeholder: |
        - Links to related JavaScript/TypeScript resources
        - Community interest or demand
        - Alternative implementations in other projects
        - JavaScript ecosystem trends

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-submission Checklist
      options:
        - label: I have searched existing issues for duplicates
          required: true
        - label: I have reviewed the current TypeScript SDK API
          required: true
        - label: I have provided clear API design examples
          required: true
        - label: I have considered type safety and browser compatibility
          required: true